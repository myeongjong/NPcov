col         <- which(dmat == dvec[i], arr.ind = TRUE)[1,2]
average     <- mean(data)
vals[i]     <- (data[row] - average) * (data[col] - average)
}
vhat        <- var(data) * (length(data)-1) / length(data)
y_err       <- vals[order(dvec)] / ( var(data) * (length(data)-1) / length(data) )
x           <- dvec[order(dvec)]
return( list(r = x, chat = y_err, vhat = vhat) )
}
###########################################################################
###
###########################################################################
simgrf_swave  <- grf(200, cov.pars = c(1, 1), xlims = c(0, 10/sqrt(2)), ylims = c(0, 10/sqrt(2)), cov.model = "wave", nug = 0, nsim = 1, messages = FALSE)
output_swave  <- extract_covpts(simgrf_swave$coords, simgrf_swave$data)
x             <- output_swave$r
y_err         <- output_swave$chat
y             <- 1 - ftn_wave(x, 0, 1, 1)
input_swave   <- list(x = x, y = y, y_err = y_err)
# ms      <- c(2, 3, 4, 5, 6)
# hs      <- seq(0.01, 0.1, by = 0.01)
# shape   <- "general"
#
# inputs        <- expand.grid(ms, hs) ; colnames(inputs) <- c("ms", "hs")
# inputs$taus   <- rep(0.1, nrow(inputs))
# inputs$ns     <- inputs$ms * 10
# result_cv_us  <- cv_pdnr(x = x, y = y_err, hs = inputs$hs, ns = inputs$ns, ms = inputs$ms, taus = inputs$taus, expand = FALSE, eval = NULL, k = 5, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5, ncores = NULL)
# fit_us        <- pdnr(x = x, y = y_err, h = result_cv_us$input.best$h, n = result_cv_us$input.best$n, m = result_cv_us$input.best$m, tau = result_cv_us$input.best$tau, eval = NULL, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm1          <- proc.time()
fit_us_swave  <- pdnr(x = x, y = y_err, h = 0.2, n = 50, m = 5, tau = 0.1, eval = NULL, kernel = "gaussian", shape = "general", method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm1          <- proc.time() - ptm1
plot(x, y_err * output_swave$vhat, col = "grey80", ylim = c(-0.5, 1))
lines(x, y, lwd = 2)
lines(fit_us_swave$eval, fit_us_swave$yhat * output_swave$vhat, col = "firebrick2", lwd = 2)
# save(simgrf_swave, output_swave, fit_us_swave, input_swave, file = "out/simout_covariance_function_estimation.RData")
###########################################################################
###
###########################################################################
simgrf_sexpo  <- grf(200, cov.pars = c(1, 4), xlims = c(0, 10/sqrt(2)), ylims = c(0, 10/sqrt(2)), cov.model = "exponential", nug = 0, nsim = 1, messages = FALSE)
output_sexpo  <- extract_covpts(simgrf_sexpo$coords, simgrf_sexpo$data)
x             <- output_sexpo$r
y_err         <- output_sexpo$chat
y             <- 1 - ftn_exponential(x, 0, 1, 4)
input_sexpo   <- list(x = x, y = y, y_err = y_err)
# ms      <- c(2, 3, 4, 5, 6)
# hs      <- seq(0.01, 0.1, by = 0.01)
# shape   <- "general"
#
# inputs        <- expand.grid(ms, hs) ; colnames(inputs) <- c("ms", "hs")
# inputs$taus   <- rep(0.1, nrow(inputs))
# inputs$ns     <- inputs$ms * 10
# result_cv_us  <- cv_pdnr(x = x, y = y_err, hs = inputs$hs, ns = inputs$ns, ms = inputs$ms, taus = inputs$taus, expand = FALSE, eval = NULL, k = 5, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5, ncores = NULL)
# fit_us        <- pdnr(x = x, y = y_err, h = result_cv_us$input.best$h, n = result_cv_us$input.best$n, m = result_cv_us$input.best$m, tau = result_cv_us$input.best$tau, eval = NULL, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm2          <- proc.time()
fit_us_sexpo  <- pdnr(x = x, y = y_err, h = 0.1, n = 100, m = 10, tau = 0.1, eval = NULL, kernel = "gaussian", shape = "monotone", method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm2          <- proc.time() - ptm2
plot(x, y_err * output_sexpo$vhat, col = "grey80", ylim = c(-0.5, 1))
lines(x, y, lwd = 2)
lines(fit_us_sexpo$eval, fit_us_sexpo$yhat * output_sexpo$vhat, col = "firebrick2", lwd = 2)
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Simulation - covariance function estimation
###
###########################################################################
library(NPcov)
library(geoR)
rm(list = ls())
set.seed(11092022)
###########################################################################
### simulation function
###########################################################################
extract_covpts <- function(coords, data)
{
dmat        <- dist(coords)
dvec        <- as.vector(dmat)
dmat        <- as.matrix(dmat)
vals        <- rep(NA, length(dvec))
for(i in 1:length(vals)) {
row         <- which(dmat == dvec[i], arr.ind = TRUE)[1,1]
col         <- which(dmat == dvec[i], arr.ind = TRUE)[1,2]
average     <- mean(data)
vals[i]     <- (data[row] - average) * (data[col] - average)
}
vhat        <- var(data) * (length(data)-1) / length(data)
y_err       <- vals[order(dvec)] / ( var(data) * (length(data)-1) / length(data) )
x           <- dvec[order(dvec)]
return( list(r = x, chat = y_err, vhat = vhat) )
}
###########################################################################
###
###########################################################################
simgrf_swave  <- grf(200, cov.pars = c(1, 1), xlims = c(0, 10/sqrt(2)), ylims = c(0, 10/sqrt(2)), cov.model = "wave", nug = 0, nsim = 1, messages = FALSE)
output_swave  <- extract_covpts(simgrf_swave$coords, simgrf_swave$data)
x             <- output_swave$r
y_err         <- output_swave$chat
y             <- 1 - ftn_wave(x, 0, 1, 1)
input_swave   <- list(x = x, y = y, y_err = y_err)
# ms      <- c(2, 3, 4, 5, 6)
# hs      <- seq(0.01, 0.1, by = 0.01)
# shape   <- "general"
#
# inputs        <- expand.grid(ms, hs) ; colnames(inputs) <- c("ms", "hs")
# inputs$taus   <- rep(0.1, nrow(inputs))
# inputs$ns     <- inputs$ms * 10
# result_cv_us  <- cv_pdnr(x = x, y = y_err, hs = inputs$hs, ns = inputs$ns, ms = inputs$ms, taus = inputs$taus, expand = FALSE, eval = NULL, k = 5, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5, ncores = NULL)
# fit_us        <- pdnr(x = x, y = y_err, h = result_cv_us$input.best$h, n = result_cv_us$input.best$n, m = result_cv_us$input.best$m, tau = result_cv_us$input.best$tau, eval = NULL, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm1          <- proc.time()
fit_us_swave  <- pdnr(x = x, y = y_err, h = 0.2, n = 50, m = 5, tau = 0.1, eval = NULL, kernel = "gaussian", shape = "general", method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm1          <- proc.time() - ptm1
ptm1
plot(x, y_err * output_swave$vhat, col = "grey80", ylim = c(-0.5, 1))
lines(x, y, lwd = 2)
lines(fit_us_swave$eval, fit_us_swave$yhat * output_swave$vhat, col = "firebrick2", lwd = 2)
# save(simgrf_swave, output_swave, fit_us_swave, input_swave, file = "out/simout_covariance_function_estimation.RData")
###########################################################################
###
###########################################################################
simgrf_sexpo  <- grf(200, cov.pars = c(1, 1), xlims = c(0, 10/sqrt(2)), ylims = c(0, 10/sqrt(2)), cov.model = "exponential", nug = 0, nsim = 1, messages = FALSE)
output_sexpo  <- extract_covpts(simgrf_sexpo$coords, simgrf_sexpo$data)
x             <- output_sexpo$r
y_err         <- output_sexpo$chat
y             <- 1 - ftn_exponential(x, 0, 1, 1)
input_sexpo   <- list(x = x, y = y, y_err = y_err)
# ms      <- c(2, 3, 4, 5, 6)
# hs      <- seq(0.01, 0.1, by = 0.01)
# shape   <- "general"
#
# inputs        <- expand.grid(ms, hs) ; colnames(inputs) <- c("ms", "hs")
# inputs$taus   <- rep(0.1, nrow(inputs))
# inputs$ns     <- inputs$ms * 10
# result_cv_us  <- cv_pdnr(x = x, y = y_err, hs = inputs$hs, ns = inputs$ns, ms = inputs$ms, taus = inputs$taus, expand = FALSE, eval = NULL, k = 5, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5, ncores = NULL)
# fit_us        <- pdnr(x = x, y = y_err, h = result_cv_us$input.best$h, n = result_cv_us$input.best$n, m = result_cv_us$input.best$m, tau = result_cv_us$input.best$tau, eval = NULL, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm2          <- proc.time()
fit_us_sexpo  <- pdnr(x = x, y = y_err, h = 0.1, n = 100, m = 10, tau = 0.1, eval = NULL, kernel = "gaussian", shape = "monotone", method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm2          <- proc.time() - ptm2
ptm2
plot(x, y_err * output_sexpo$vhat, col = "grey80", ylim = c(-0.5, 1))
lines(x, y, lwd = 2)
lines(fit_us_sexpo$eval, fit_us_sexpo$yhat * output_sexpo$vhat, col = "firebrick2", lwd = 2)
save(simgrf_swave, output_swave, fit_us_swave, input_swave, simgrf_sexpo, output_sexpo, fit_us_sexpo, input_sexpo, file = "out/simout_covariance_function_estimation.RData")
set.seed(11102022)
simgrf_sexpo  <- grf(200, cov.pars = c(1, 1), xlims = c(0, 10/sqrt(2)), ylims = c(0, 10/sqrt(2)), cov.model = "exponential", nug = 0, nsim = 1, messages = FALSE)
output_sexpo  <- extract_covpts(simgrf_sexpo$coords, simgrf_sexpo$data)
x             <- output_sexpo$r
y_err         <- output_sexpo$chat
y             <- 1 - ftn_exponential(x, 0, 1, 1)
input_sexpo   <- list(x = x, y = y, y_err = y_err)
# ms      <- c(2, 3, 4, 5, 6)
# hs      <- seq(0.01, 0.1, by = 0.01)
# shape   <- "general"
#
# inputs        <- expand.grid(ms, hs) ; colnames(inputs) <- c("ms", "hs")
# inputs$taus   <- rep(0.1, nrow(inputs))
# inputs$ns     <- inputs$ms * 10
# result_cv_us  <- cv_pdnr(x = x, y = y_err, hs = inputs$hs, ns = inputs$ns, ms = inputs$ms, taus = inputs$taus, expand = FALSE, eval = NULL, k = 5, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5, ncores = NULL)
# fit_us        <- pdnr(x = x, y = y_err, h = result_cv_us$input.best$h, n = result_cv_us$input.best$n, m = result_cv_us$input.best$m, tau = result_cv_us$input.best$tau, eval = NULL, kernel = "gaussian", shape = shape, method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm2          <- proc.time()
fit_us_sexpo  <- pdnr(x = x, y = y_err, h = 0.1, n = 100, m = 10, tau = 0.1, eval = NULL, kernel = "gaussian", shape = "monotone", method = "reflection", dist_init = "exponential", min_iter = 20, max_iter = 200, tol = 1e-3, check = 5)
ptm2          <- proc.time() - ptm2
ptm2
plot(x, y_err * output_sexpo$vhat, col = "grey80", ylim = c(-0.5, 1))
lines(x, y, lwd = 2)
lines(fit_us_sexpo$eval, fit_us_sexpo$yhat * output_sexpo$vhat, col = "firebrick2", lwd = 2)
save(simgrf_swave, output_swave, fit_us_swave, input_swave, simgrf_sexpo, output_sexpo, fit_us_sexpo, input_sexpo, file = "out/simout_covariance_function_estimation.RData")
rm(list = ls())
load(file = "out/simout_covariance_function_estimation.RData")
simgrf_sexpo$coords
visdat_sexpo  <- data.frame(x = simgrf_sexpo$coords[, 1], y = simgrf_sexpo$coords[, 2], z = simgrf_sexpo$data)
visdat_sexpo
library(NPcov)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(grid)
p1            <- ggplot() + geom_point(data = visdat_sexpo, aes(x = x, y = y, z = z))
p1            <- ggplot() + geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z))
p1
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z)) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
p1
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z)) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = blank(), legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z)) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element.blank(), legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z)) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
p1
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z)) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
p1
install.packages("viridis")
library(NPcov)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(gridExtra)
library(grid)
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z)) +
viridis::scale_color_viridis(direction = -1, option = "viridis") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
p1
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z)) +
viridis::scale_color_viridis(direction = -1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
p1
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z)) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
p1
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
p1
p1            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(1.5, "cm"))
p1
p2            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75")
p2
p2            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_sexpo$x, y = input_sexpo$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75)
p2
p2            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_sexpo$x, y = input_sexpo$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = output_sexpo$r, y = output_sexpo$chat * output_sexpo$vhat), aes(x = x, y = y, col = type, lty = type), lwd = 1.2)
p2
p2            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_sexpo$x, y = input_sexpo$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = output_sexpo$r, y = output_sexpo$chat * output_sexpo$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2)
p2
output_sexpo$r
plot(utput_sexpo$r, output_sexpo$chat * output_sexpo$vhat)
plot(output_sexpo$r, output_sexpo$chat * output_sexpo$vhat)
p2            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_sexpo$x, y = input_sexpo$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_sexpo$eval, y = fit_us_sexpo$yhat * output_sexpo$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2)
p2
p2            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_sexpo$x, y = input_sexpo$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_sexpo$eval, y = fit_us_sexpo$yhat * output_sexpo$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2) +
theme_bw() + xlab(NULL) + ylab(NULL) +
coord_cartesian(ylim = c(-0.75, 1.25) * output_sexpo$vhat)
p2
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Simulation - covariance function estimation
###
###########################################################################
library(NPcov)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(gridExtra)
library(grid)
###########################################################################
###
###########################################################################
rm(list = ls())
load(file = "out/simout_covariance_function_estimation.RData")
###########################################################################
###
###########################################################################
visdat_swave  <- data.frame(x = simgrf_swave$coords[, 1], y = simgrf_swave$coords[, 2], z = simgrf_swave$data)
p1            <- ggplot() +
geom_point(data = visdat_swave, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(1.5, "cm"))
p2            <- ggplot() +
geom_point(data = data.frame(x = input_swave$x, y = input_swave$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_swave$x, y = input_swave$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_swave$eval, y = fit_us_swave$yhat * output_swave$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2) +
theme_bw() + xlab(NULL) + ylab(NULL) +
coord_cartesian(ylim = c(-0.75, 1.25) * output_swave$vhat)
###########################################################################
###
###########################################################################
visdat_sexpo  <- data.frame(x = simgrf_sexpo$coords[, 1], y = simgrf_sexpo$coords[, 2], z = simgrf_sexpo$data)
p3            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(1.5, "cm"))
p4            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_sexpo$x, y = input_sexpo$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_sexpo$eval, y = fit_us_sexpo$yhat * output_sexpo$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2) +
theme_bw() + xlab(NULL) + ylab(NULL) +
coord_cartesian(ylim = c(-0.75, 1.25) * output_sexpo$vhat)
###########################################################################
###
###########################################################################
p1
p2
p3
p4
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Simulation - covariance function estimation
###
###########################################################################
library(NPcov)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(gridExtra)
library(grid)
###########################################################################
###
###########################################################################
rm(list = ls())
load(file = "out/simout_covariance_function_estimation.RData")
###########################################################################
###
###########################################################################
visdat_swave  <- data.frame(x = simgrf_swave$coords[, 1], y = simgrf_swave$coords[, 2], z = simgrf_swave$data)
p1            <- ggplot() +
geom_point(data = visdat_swave, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(1.5, "cm"))
p2            <- ggplot() +
geom_point(data = data.frame(x = input_swave$x, y = input_swave$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_swave$x, y = input_swave$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_swave$eval, y = fit_us_swave$yhat * output_swave$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2) +
theme_bw() + xlab(NULL) + ylab(NULL) +
coord_cartesian(ylim = c(-0.75, 1.25) * output_swave$vhat)
###########################################################################
###
###########################################################################
visdat_sexpo  <- data.frame(x = simgrf_sexpo$coords[, 1], y = simgrf_sexpo$coords[, 2], z = simgrf_sexpo$data)
p3            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(1.5, "cm"))
p4            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_sexpo$x, y = input_sexpo$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_sexpo$eval, y = fit_us_sexpo$yhat * output_sexpo$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2) +
theme_bw() + xlab(NULL) + ylab(NULL) +
coord_cartesian(ylim = c(-0.75, 1.25) * output_sexpo$vhat)
###########################################################################
###
###########################################################################
p.merge.1     <- grid.arrange(p1, p2, nrow = 1)
ggplot2::ggsave("img/simulation_covariance_wave.pdf", p.merge.1, width = 7.5, height = 3.5)
p.merge.2     <- grid.arrange(p3, p4, nrow = 1)
ggplot2::ggsave("img/application_covariance_expo.pdf", p.merge.2, width = 7.5, height = 3.5)
ggplot2::ggsave("img/simulation_covariance_expo.pdf", p.merge.2, width = 7.5, height = 3.5)
?grid.arrange
p.merge.1     <- grid.arrange(p1, p2, nrow = 1, widths = c(3.5, 4))
ggplot2::ggsave("img/simulation_covariance_wave.pdf", p.merge.1, width = 7.5, height = 3.5)
p.merge.1     <- grid.arrange(p1, p2, nrow = 1, widths = c(3.5, 4))
ggplot2::ggsave("img/simulation_covariance_wave.pdf", p.merge.1, width = 7.5, height = 3.5)
p.merge.1     <- grid.arrange(p1, p2, nrow = 1, widths = c(3, 4.5))
ggplot2::ggsave("img/simulation_covariance_wave.pdf", p.merge.1, width = 7.5, height = 3.5)
p.merge.1     <- grid.arrange(p1, p2, nrow = 1, widths = c(2.75, 4.75))
ggplot2::ggsave("img/simulation_covariance_wave.pdf", p.merge.1, width = 7.5, height = 3.5)
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Simulation - covariance function estimation
###
###########################################################################
library(NPcov)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(gridExtra)
library(grid)
###########################################################################
###
###########################################################################
rm(list = ls())
load(file = "out/simout_covariance_function_estimation.RData")
###########################################################################
###
###########################################################################
visdat_swave  <- data.frame(x = simgrf_swave$coords[, 1], y = simgrf_swave$coords[, 2], z = simgrf_swave$data)
p1            <- ggplot() +
geom_point(data = visdat_swave, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(1.25, "cm"))
p2            <- ggplot() +
geom_point(data = data.frame(x = input_swave$x, y = input_swave$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_swave$x, y = input_swave$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_swave$eval, y = fit_us_swave$yhat * output_swave$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2) +
theme_bw() + xlab(NULL) + ylab(NULL) +
coord_cartesian(ylim = c(-0.75, 1.25) * output_swave$vhat)
###########################################################################
###
###########################################################################
visdat_sexpo  <- data.frame(x = simgrf_sexpo$coords[, 1], y = simgrf_sexpo$coords[, 2], z = simgrf_sexpo$data)
p3            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(1.25, "cm"))
p4            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_sexpo$x, y = input_sexpo$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_sexpo$eval, y = fit_us_sexpo$yhat * output_sexpo$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2) +
theme_bw() + xlab(NULL) + ylab(NULL) +
coord_cartesian(ylim = c(-0.75, 1.25) * output_sexpo$vhat)
###########################################################################
###
###########################################################################
p.merge.1     <- grid.arrange(p1, p2, nrow = 1, widths = c(2.75, 4.75))
ggplot2::ggsave("img/simulation_covariance_wave.pdf", p.merge.1, width = 7.5, height = 3.5)
p.merge.2     <- grid.arrange(p3, p4, nrow = 1, widths = c(2.75, 4.75))
ggplot2::ggsave("img/simulation_covariance_expo.pdf", p.merge.2, width = 7.5, height = 3.5)
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Simulation - covariance function estimation
###
###########################################################################
library(NPcov)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(gridExtra)
library(grid)
###########################################################################
###
###########################################################################
rm(list = ls())
load(file = "out/simout_covariance_function_estimation.RData")
###########################################################################
###
###########################################################################
visdat_swave  <- data.frame(x = simgrf_swave$coords[, 1], y = simgrf_swave$coords[, 2], z = simgrf_swave$data)
p1            <- ggplot() +
geom_point(data = visdat_swave, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(1.25, "cm"))
p2            <- ggplot() +
geom_point(data = data.frame(x = input_swave$x, y = input_swave$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_swave$x, y = input_swave$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_swave$eval, y = fit_us_swave$yhat * output_swave$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2) +
theme_bw() + xlab(NULL) + ylab(NULL) +
geom_hline(yintercept = 0, linetype="solid", color = "black") +
coord_cartesian(ylim = c(-0.75, 1.25) * output_swave$vhat)
###########################################################################
###
###########################################################################
visdat_sexpo  <- data.frame(x = simgrf_sexpo$coords[, 1], y = simgrf_sexpo$coords[, 2], z = simgrf_sexpo$data)
p3            <- ggplot() +
geom_point(data = visdat_sexpo, aes(x = x, y = y, col = z), size = 2) +
viridis::scale_color_viridis(direction = 1, option = "turbo") +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.title = element_blank(), legend.position = 'top', legend.direction = 'horizontal', legend.key.width = unit(1.25, "cm"))
p4            <- ggplot() +
geom_point(data = data.frame(x = input_sexpo$x, y = input_sexpo$y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = input_sexpo$x, y = input_sexpo$y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = data.frame(x = fit_us_sexpo$eval, y = fit_us_sexpo$yhat * output_sexpo$vhat), aes(x = x, y = y), color = "#E41A1C", lwd = 1.2) +
theme_bw() + xlab(NULL) + ylab(NULL) +
geom_hline(yintercept = 0, linetype="solid", color = "black") +
coord_cartesian(ylim = c(-0.75, 1.25) * output_sexpo$vhat)
###########################################################################
###
###########################################################################
p.merge.1     <- grid.arrange(p1, p2, nrow = 1, widths = c(2.75, 4.75))
ggplot2::ggsave("img/simulation_covariance_wave.pdf", p.merge.1, width = 7.5, height = 3.5)
p.merge.2     <- grid.arrange(p3, p4, nrow = 1, widths = c(2.75, 4.75))
ggplot2::ggsave("img/simulation_covariance_expo.pdf", p.merge.2, width = 7.5, height = 3.5)
length(fit_us_sexpo$eval)
library(NPcov)
devtools::install_github("NPcov")
?devtools::install_github
devtools::install_github("myeongjong/NPcov")
