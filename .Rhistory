kernel        <- "gaussian"
# shape         <- "general"
method        <- "reflection"
dist_init     <- "exponential"
min_iter      <- 20
max_iter      <- 200
tol           <- 1e-3
check         <- 5
ncores        <- NULL
###########################################################################
### isotropic estimator
###########################################################################
ms            <- c(7, 8, 9, 10)
hs            <- seq(0.15, 0.2, by = 0.01)
inputs        <- expand.grid(ms, hs) ; colnames(inputs) <- c("ms", "hs")
inputs$taus   <- rep(0.1, nrow(inputs))
inputs$ns     <- inputs$ms * 10
ptm_cv_iso    <- proc.time()
cvout_iso     <- cv_pdnr(x = output_sic100$r, y = output_sic100$chat / output_sic100$vhat, hs = inputs$hs, ns = inputs$ns, ms = inputs$ms, taus = inputs$taus, expand = expand, eval = eval, k = k, kernel = kernel, shape = "general", method = method, dist_init = dist_init, min_iter = min_iter, max_iter = max_iter, tol = tol, check = check, ncores = ncores)
ptm_cv_iso    <- proc.time() - ptm_cv_iso
ptm_cv_iso # 52605.39
ptm_best_iso  <- proc.time()
vhat          <- output_sic100$vhat
for(i in 1:100) {
message("Step ", i)
vhat_old      <- vhat
bestout_iso   <- pdnr(x = output_sic100$r, y = output_sic100$chat / vhat, h = cvout_iso$input.best$h, n = cvout_iso$input.best$n, m = cvout_iso$input.best$m, tau = cvout_iso$input.best$tau, eval = eval, kernel = kernel, shape = "general", method = method, dist_init = dist_init, min_iter = min_iter, max_iter = max_iter, tol = tol, check = check)
vgrid         <- seq(from = max(0, vhat - 1500), to = vhat + 1500, length.out = 1000)
msevec        <- c()
for(j in 1:length(vgrid)) msevec[j] <- mean((output_sic100$chat - vgrid[j] * bestout_iso$yhat)^2)
vhat          <- vgrid[which.min(msevec)]
if(abs(vhat_old - vhat) < 0.005 * output_sic100$vhat) break
}
ptm_best_iso  <- proc.time() - ptm_best_iso
i ; ptm_best_iso # 4703.84
vhat_iso      <- vhat
###########################################################################
### monotone estimator
###########################################################################
ms            <- c(2, 3, 4, 5)
hs            <- seq(0.01, 0.1, by = 0.01)
inputs        <- expand.grid(ms, hs) ; colnames(inputs) <- c("ms", "hs")
inputs$taus   <- rep(0.1, nrow(inputs))
inputs$ns     <- inputs$ms * 10
ptm_cv_mon    <- proc.time()
cvout_mon     <- cv_pdnr(x = output_sic100$r, y = output_sic100$chat / output_sic100$vhat, hs = inputs$hs, ns = inputs$ns, ms = inputs$ms, taus = inputs$taus, expand = expand, eval = eval, k = k, kernel = kernel, shape = "monotone", method = method, dist_init = dist_init, min_iter = min_iter, max_iter = max_iter, tol = tol, check = check, ncores = ncores)
ptm_cv_mon    <- proc.time() - ptm_cv_mon
ptm_cv_mon # 286.55
ptm_best_mon  <- proc.time()
vhat          <- output_sic100$vhat
for(i in 1:100) {
message("Step ", i)
vhat_old      <- vhat
bestout_mon   <- pdnr(x = output_sic100$r, y = output_sic100$chat / vhat, h = cvout_mon$input.best$h, n = cvout_mon$input.best$n, m = cvout_mon$input.best$m, tau = cvout_mon$input.best$tau, eval = eval, kernel = kernel, shape = "monotone", method = method, dist_init = dist_init, min_iter = min_iter, max_iter = max_iter, tol = tol, check = check)
vgrid         <- seq(from = max(0, vhat - 1500), to = vhat + 1500, length.out = 1000)
msevec        <- c()
for(j in 1:length(vgrid)) msevec[j] <- mean((output_sic100$chat - vgrid[j] * bestout_mon$yhat)^2)
vhat          <- vgrid[which.min(msevec)]
if(abs(vhat_old - vhat) < 0.005 * output_sic100$vhat) break
}
ptm_best_mon  <- proc.time() - ptm_best_mon
i ; ptm_best_mon # 18.58
vhat_mon      <- vhat
###########################################################################
### save
###########################################################################
plot(output_sic100$r, output_sic100$chat, xlab = "r", ylab = "c", col = "gray", ylim = c(-1.25, 1.25) * output_sic100$vhat)
abline(h = 0, lwd = 2, col = "black", lty = "dashed")
lines(bestout_iso$eval, bestout_iso$yhat * vhat_iso, lwd = 2, col = "red")
lines(bestout_mon$eval, bestout_mon$yhat * vhat_mon, lwd = 2, col = "blue")
save(sic.100, sic.borders, output_sic100, cvout_iso, ptm_cv_iso, bestout_iso, vhat_iso, ptm_best_iso, cvout_mon, ptm_cv_mon, bestout_mon, vhat_mon, ptm_best_mon, file = "out/appout_sic100_gaussian.RData")
cvout_iso$input.best$h
cvout_iso$input.best$m
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Real data application
###
###########################################################################
library(geoR)
library(NPcov)
rm(list = ls())
set.seed(11072022) # set.seed(11032022)
###########################################################################
### data
###########################################################################
data("SIC", package = "geoR")
rm(sic.some, sic.367)
# pdf("img/sic100.pdf")
# points(sic.100, borders = sic.borders, cex.axis = 1.5, cex.main = 1.5, cex.sub = 1.5, xlab = "", ylab = "")
# dev.off()
#
# pdf("img/sicall.pdf")
# points(sic.all, borders = sic.borders, cex.axis = 1.5, cex.main = 1.5, cex.sub = 1.5, xlab = "", ylab = "")
# dev.off()
extract_sic <- function(target, xmax = 8)
{
dmat          <- dist(sic.100$coords)
dvec          <- as.vector(dmat)
dmat          <- as.matrix(dmat)
vals          <- rep(NA, length(dvec))
for(i in 1:length(vals)) {
row           <- which(dmat == dvec[i], arr.ind = TRUE)[1,1]
col           <- which(dmat == dvec[i], arr.ind = TRUE)[1,2]
average       <- mean(target$data)
vals[i]       <- (target$data[row] - average) * (target$data[col] - average)
}
vhat          <- var(target$data) * (length(target$data)-1) / length(target$data)
y_err         <- vals[order(dvec)] # / ( var(target$data) * (length(target$data)-1) / length(target$data) )
x             <- dvec[order(dvec)]
xmax0         <- max(x)
x             <- x / xmax0 * xmax
return( list(r = x, xmax0 = xmax0, xmax = xmax, chat = y_err, vhat = vhat) )
}
output_sic100 <- extract_sic(target = sic.100)
output_sicall <- extract_sic(target = sic.all)
# par(mfrow = c(1, 2))
# plot(output_sic100$r, output_sic100$chat, col = "gray", xlab = "r", ylab = "corr")
# plot(output_sicall$r, output_sicall$chat, col = "gray")
# par(mfrow = c(1, 1))
###########################################################################
### setting
###########################################################################
expand        <- FALSE
eval          <- NULL
k             <- 5
kernel        <- "gaussian"
# shape         <- "general"
method        <- "reflection"
dist_init     <- "exponential"
min_iter      <- 20
max_iter      <- 200
tol           <- 1e-3
check         <- 5
ncores        <- NULL
###########################################################################
### isotropic estimator
###########################################################################
ms            <- c(5, 6, 7, 8)
hs            <- seq(0.15, 0.2, by = 0.01)
inputs        <- expand.grid(ms, hs) ; colnames(inputs) <- c("ms", "hs")
inputs$taus   <- rep(0.1, nrow(inputs))
inputs$ns     <- inputs$ms * 10
ptm_cv_iso    <- proc.time()
cvout_iso     <- cv_pdnr(x = output_sic100$r, y = output_sic100$chat / output_sic100$vhat, hs = inputs$hs, ns = inputs$ns, ms = inputs$ms, taus = inputs$taus, expand = expand, eval = eval, k = k, kernel = kernel, shape = "general", method = method, dist_init = dist_init, min_iter = min_iter, max_iter = max_iter, tol = tol, check = check, ncores = ncores)
ptm_cv_iso    <- proc.time() - ptm_cv_iso
ptm_cv_iso # 52605.39
ptm_best_iso  <- proc.time()
vhat          <- output_sic100$vhat
for(i in 1:100) {
message("Step ", i)
vhat_old      <- vhat
bestout_iso   <- pdnr(x = output_sic100$r, y = output_sic100$chat / vhat, h = cvout_iso$input.best$h, n = cvout_iso$input.best$n, m = cvout_iso$input.best$m, tau = cvout_iso$input.best$tau, eval = eval, kernel = kernel, shape = "general", method = method, dist_init = dist_init, min_iter = min_iter, max_iter = max_iter, tol = tol, check = check)
vgrid         <- seq(from = max(0, vhat - 1500), to = vhat + 1500, length.out = 1000)
msevec        <- c()
for(j in 1:length(vgrid)) msevec[j] <- mean((output_sic100$chat - vgrid[j] * bestout_iso$yhat)^2)
vhat          <- vgrid[which.min(msevec)]
if(abs(vhat_old - vhat) < 0.005 * output_sic100$vhat) break
}
ptm_best_iso  <- proc.time() - ptm_best_iso
i ; ptm_best_iso # 4703.84
vhat_iso      <- vhat
###########################################################################
### monotone estimator
###########################################################################
ms            <- c(2, 3, 4, 5)
hs            <- seq(0.01, 0.1, by = 0.01)
inputs        <- expand.grid(ms, hs) ; colnames(inputs) <- c("ms", "hs")
inputs$taus   <- rep(0.1, nrow(inputs))
inputs$ns     <- inputs$ms * 10
ptm_cv_mon    <- proc.time()
cvout_mon     <- cv_pdnr(x = output_sic100$r, y = output_sic100$chat / output_sic100$vhat, hs = inputs$hs, ns = inputs$ns, ms = inputs$ms, taus = inputs$taus, expand = expand, eval = eval, k = k, kernel = kernel, shape = "monotone", method = method, dist_init = dist_init, min_iter = min_iter, max_iter = max_iter, tol = tol, check = check, ncores = ncores)
ptm_cv_mon    <- proc.time() - ptm_cv_mon
ptm_cv_mon # 286.55
ptm_best_mon  <- proc.time()
vhat          <- output_sic100$vhat
for(i in 1:100) {
message("Step ", i)
vhat_old      <- vhat
bestout_mon   <- pdnr(x = output_sic100$r, y = output_sic100$chat / vhat, h = cvout_mon$input.best$h, n = cvout_mon$input.best$n, m = cvout_mon$input.best$m, tau = cvout_mon$input.best$tau, eval = eval, kernel = kernel, shape = "monotone", method = method, dist_init = dist_init, min_iter = min_iter, max_iter = max_iter, tol = tol, check = check)
vgrid         <- seq(from = max(0, vhat - 1500), to = vhat + 1500, length.out = 1000)
msevec        <- c()
for(j in 1:length(vgrid)) msevec[j] <- mean((output_sic100$chat - vgrid[j] * bestout_mon$yhat)^2)
vhat          <- vgrid[which.min(msevec)]
if(abs(vhat_old - vhat) < 0.005 * output_sic100$vhat) break
}
ptm_best_mon  <- proc.time() - ptm_best_mon
i ; ptm_best_mon # 18.58
vhat_mon      <- vhat
###########################################################################
### save
###########################################################################
plot(output_sic100$r, output_sic100$chat, xlab = "r", ylab = "c", col = "gray", ylim = c(-1.25, 1.25) * output_sic100$vhat)
abline(h = 0, lwd = 2, col = "black", lty = "dashed")
lines(bestout_iso$eval, bestout_iso$yhat * vhat_iso, lwd = 2, col = "red")
lines(bestout_mon$eval, bestout_mon$yhat * vhat_mon, lwd = 2, col = "blue")
save(sic.100, sic.borders, output_sic100, cvout_iso, ptm_cv_iso, bestout_iso, vhat_iso, ptm_best_iso, cvout_mon, ptm_cv_mon, bestout_mon, vhat_mon, ptm_best_mon, file = "out/appout_sic100_gaussian.RData")
cvout_iso$input.best$h
cvout_iso$input.best$m
cvout_mon$input.best$h
cvout_mon$input.best$m
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Visualization
###
###########################################################################
library(geoR)
library(sf)
library(ggplot2)
library(gridExtra)
library(grid)
###########################################################################
###
###########################################################################
data(SIC)
p1          <- ggplot() +
geom_sf(data = st_linestring(sic.borders), lwd = 2, col = "grey20") +
geom_sf(data = st_as_sf(data.frame(x = sic.100$coords[, "V2"],
y = sic.100$coords[, "V3"],
z = sic.100$data),
coords = c("x", "y")),
pch = 21, aes(size = z), fill = alpha("#377EB8", 0.7), col = "grey20") +
theme_bw() + xlab(NULL) + ylab(NULL) +
guides(size = guide_legend(title="(1/10th of a mm)", title.position = "right")) +
theme(legend.text = element_text(size = 8), legend.title = element_text(size = 8), legend.direction = 'horizontal', legend.position = "top", legend.spacing.x = unit(0.1, 'cm'))
# p2          <- ggplot(data = data.frame(x = sic.100$data), ) +
#   geom_histogram(aes(x), bins = 12) + geom_freqpoly(aes(x), bins = 12)
#
# p.merge.1     <- grid.arrange(p1, p2, nrow = 1)
# ggplot2::ggsave("img/application_sic100.pdf", p1, width = 7.5, height = 3.5)
###########################################################################
###
###########################################################################
load(file = "out/appout_sic100_gaussian.RData")
visdat <- data.frame(type = c(rep("Our isotropic", length(bestout_iso$eval)),
rep("Our monotone", length(bestout_mon$eval))),
x = c(bestout_iso$eval / output_sic100$xmax * output_sic100$xmax0,
bestout_mon$eval / output_sic100$xmax * output_sic100$xmax0),
y = c(bestout_iso$yhat * vhat_iso,
bestout_mon$yhat * vhat_mon))
p3 <- ggplot() +
geom_point(data = data.frame(x = output_sic100$r / output_sic100$xmax * output_sic100$xmax0, y = output_sic100$chat), aes(x = x, y = y), color = "gray75") +
geom_line(data = visdat, aes(x = x, y = y, col = type, lty = type), lwd = 1.2, alpha = 0.75) +
geom_hline(yintercept = 0, linetype="solid", color = "black") +
scale_color_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone"), values = c("Our isotropic" = "#E41A1C", "Our monotone" = "#4DAF4A")) +
scale_linetype_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone"), values = c("Our isotropic" = "solid", "Our monotone" = "solid")) +
theme_bw() + xlab(NULL) + ylab(NULL) +
coord_cartesian(ylim = c(-0.75, 1.25) * output_sic100$vhat) +
theme(legend.direction = 'horizontal', legend.key.width = unit(1.5, "cm"), legend.position = "top")
p.merge       <- grid.arrange(p1, p3, nrow = 1)
ggplot2::ggsave("img/application_sic100.pdf", p.merge, width = 7.5, height = 3.5)
cvout_iso$input.best$h
cvout_iso$input.best$m
cvout_mon$input.best$h
cvout_mon$input.best$m
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Visualization - regression with white noise errors
###
###########################################################################
library(NPcov)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(grid)
###########################################################################
###
###########################################################################
rm(list = ls())
load(file = "out/simout_regression_with_white_noise_errors.RData")
rm(ptm1, ptm2)
###########################################################################
###
###########################################################################
idx     <- 1
x       <- result_wave_complex$history_data[[idx]]$x
y       <- result_wave_complex$history_data[[idx]]$y
y_err   <- result_wave_complex$history_data[[idx]]$y_err
fit_lc  <- result_wave_complex$history_fit[[idx]]$fit_lc
fit_ll  <- result_wave_complex$history_fit[[idx]]$fit_ll
fit_us  <- result_wave_complex$history_fit[[idx]]$fit_us
visout_cwave <- data.frame(type = c(rep("Local constant", length(as.numeric(t(fit_lc$eval)))),
rep("Local linear", length(as.numeric(t(fit_ll$eval)))),
rep("Our isotropic", length(fit_us$eval)),
rep("Our monotone", length(fit_us$eval))),
x = c(as.numeric(t(fit_lc$eval)),
as.numeric(t(fit_ll$eval)),
fit_us$eval,
fit_us$eval),
y = c(fit_lc$mean, fit_ll$mean, fit_us$yhat, rep(NA, length(fit_us$eval))))
visout_cwave$type <- factor(visout_cwave$type, levels = c("Our isotropic", "Our monotone", "Local constant", "Local linear"))
p1 <- ggplot() +
geom_point(data = data.frame(x = x, y = y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = x, y = y), aes(x = x, y = y), color = "black", lwd = 1.25) +
geom_line(data = visout_cwave, aes(x = x, y = y, col = type, lty = type), lwd = 1.2, alpha = 0.75) +
scale_color_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "#E41A1C", "Our monotone" = "#4DAF4A", "Local constant" = "#377EB8", "Local linear" = "#adad05")) +
scale_linetype_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "twodash", "Our monotone" = "twodash", "Local constant" = "dashed", "Local linear" = "dotted")) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
rm(idx, x, y, y_err, fit_lc, fit_ll, fit_us)
###########################################################################
###
###########################################################################
idx     <- 6
x       <- result_spherical_complex$history_data[[idx]]$x
y       <- result_spherical_complex$history_data[[idx]]$y
y_err   <- result_spherical_complex$history_data[[idx]]$y_err
fit_lc  <- result_spherical_complex$history_fit[[idx]]$fit_lc
fit_ll  <- result_spherical_complex$history_fit[[idx]]$fit_ll
fit_us  <- result_spherical_complex$history_fit[[idx]]$fit_us
visout_csphe <- data.frame(type = c(rep("Local constant", length(as.numeric(t(fit_lc$eval)))),
rep("Local linear", length(as.numeric(t(fit_ll$eval)))),
rep("Our isotropic", length(fit_us$eval)),
rep("Our monotone", length(fit_us$eval))),
x = c(as.numeric(t(fit_lc$eval)),
as.numeric(t(fit_ll$eval)),
fit_us$eval,
fit_us$eval),
y = c(fit_lc$mean, fit_ll$mean, rep(NA, length(fit_us$eval)), fit_us$yhat))
visout_csphe$type <- factor(visout_csphe$type, levels = c("Our isotropic", "Our monotone", "Local constant", "Local linear"))
p2 <- ggplot() +
geom_point(data = data.frame(x = x, y = y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = x, y = y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = visout_csphe, aes(x = x, y = y, col = type, lty = type), lwd = 1.2, alpha = 0.75) +
scale_color_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "#E41A1C", "Our monotone" = "#4DAF4A", "Local constant" = "#377EB8", "Local linear" = "#adad05")) +
scale_linetype_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "twodash", "Our monotone" = "twodash", "Local constant" = "dashed", "Local linear" = "dotted")) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
tmp       <- ggplot_gtable(ggplot_build(p1))
leg       <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
mylegend  <- tmp$grobs[[leg]]
### Merge the two plots ###
p.merge    <- grid.arrange(mylegend, arrangeGrob(p1 + theme(legend.position = "none"),
p2 + theme(legend.position = "none"),
ncol = 2), nrow = 2, heights = c(1, 10))
ggplot2::ggsave("img/simulation_regression.pdf", p.merge, width = 7.5, height = 3.5)
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Visualization - regression with white noise errors
###
###########################################################################
library(NPcov)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(grid)
###########################################################################
###
###########################################################################
rm(list = ls())
load(file = "out/simout_regression_with_white_noise_errors.RData")
rm(ptm1, ptm2)
###########################################################################
###
###########################################################################
idx     <- 1
x       <- result_wave_complex$history_data[[idx]]$x
y       <- result_wave_complex$history_data[[idx]]$y
y_err   <- result_wave_complex$history_data[[idx]]$y_err
fit_lc  <- result_wave_complex$history_fit[[idx]]$fit_lc
fit_ll  <- result_wave_complex$history_fit[[idx]]$fit_ll
fit_us  <- result_wave_complex$history_fit[[idx]]$fit_us
visout_cwave <- data.frame(type = c(rep("Local constant", length(as.numeric(t(fit_lc$eval)))),
rep("Local linear", length(as.numeric(t(fit_ll$eval)))),
rep("Our isotropic", length(fit_us$eval)),
rep("Our monotone", length(fit_us$eval))),
x = c(as.numeric(t(fit_lc$eval)),
as.numeric(t(fit_ll$eval)),
fit_us$eval,
fit_us$eval),
y = c(fit_lc$mean, fit_ll$mean, fit_us$yhat, rep(NA, length(fit_us$eval))))
visout_cwave$type <- factor(visout_cwave$type, levels = c("Our isotropic", "Our monotone", "Local constant", "Local linear"))
p1 <- ggplot() +
geom_point(data = data.frame(x = x, y = y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = x, y = y), aes(x = x, y = y), color = "black", lwd = 1.25) +
geom_line(data = visout_cwave, aes(x = x, y = y, col = type, lty = type), lwd = 1.2, alpha = 0.75) +
scale_color_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "#E41A1C", "Our monotone" = "#4DAF4A", "Local constant" = "#377EB8", "Local linear" = "#b3b327")) +
scale_linetype_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "twodash", "Our monotone" = "twodash", "Local constant" = "dashed", "Local linear" = "dotted")) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
rm(idx, x, y, y_err, fit_lc, fit_ll, fit_us)
###########################################################################
###
###########################################################################
idx     <- 6
x       <- result_spherical_complex$history_data[[idx]]$x
y       <- result_spherical_complex$history_data[[idx]]$y
y_err   <- result_spherical_complex$history_data[[idx]]$y_err
fit_lc  <- result_spherical_complex$history_fit[[idx]]$fit_lc
fit_ll  <- result_spherical_complex$history_fit[[idx]]$fit_ll
fit_us  <- result_spherical_complex$history_fit[[idx]]$fit_us
visout_csphe <- data.frame(type = c(rep("Local constant", length(as.numeric(t(fit_lc$eval)))),
rep("Local linear", length(as.numeric(t(fit_ll$eval)))),
rep("Our isotropic", length(fit_us$eval)),
rep("Our monotone", length(fit_us$eval))),
x = c(as.numeric(t(fit_lc$eval)),
as.numeric(t(fit_ll$eval)),
fit_us$eval,
fit_us$eval),
y = c(fit_lc$mean, fit_ll$mean, rep(NA, length(fit_us$eval)), fit_us$yhat))
visout_csphe$type <- factor(visout_csphe$type, levels = c("Our isotropic", "Our monotone", "Local constant", "Local linear"))
p2 <- ggplot() +
geom_point(data = data.frame(x = x, y = y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = x, y = y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = visout_csphe, aes(x = x, y = y, col = type, lty = type), lwd = 1.2, alpha = 0.75) +
scale_color_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "#E41A1C", "Our monotone" = "#4DAF4A", "Local constant" = "#377EB8", "Local linear" = "#b3b327")) +
scale_linetype_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "twodash", "Our monotone" = "twodash", "Local constant" = "dashed", "Local linear" = "dotted")) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
tmp       <- ggplot_gtable(ggplot_build(p1))
leg       <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
mylegend  <- tmp$grobs[[leg]]
### Merge the two plots ###
p.merge    <- grid.arrange(mylegend, arrangeGrob(p1 + theme(legend.position = "none"),
p2 + theme(legend.position = "none"),
ncol = 2), nrow = 2, heights = c(1, 10))
ggplot2::ggsave("img/simulation_regression.pdf", p.merge, width = 7.5, height = 3.5)
###########################################################################
###
###    Author : MYEONGJONG KANG
###    E-mail : kmj.stat@gmail.com
###
###    Description : Visualization - regression with white noise errors
###
###########################################################################
library(NPcov)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(grid)
###########################################################################
###
###########################################################################
rm(list = ls())
load(file = "out/simout_regression_with_white_noise_errors.RData")
rm(ptm1, ptm2)
###########################################################################
###
###########################################################################
idx     <- 1
x       <- result_wave_complex$history_data[[idx]]$x
y       <- result_wave_complex$history_data[[idx]]$y
y_err   <- result_wave_complex$history_data[[idx]]$y_err
fit_lc  <- result_wave_complex$history_fit[[idx]]$fit_lc
fit_ll  <- result_wave_complex$history_fit[[idx]]$fit_ll
fit_us  <- result_wave_complex$history_fit[[idx]]$fit_us
visout_cwave <- data.frame(type = c(rep("Local constant", length(as.numeric(t(fit_lc$eval)))),
rep("Local linear", length(as.numeric(t(fit_ll$eval)))),
rep("Our isotropic", length(fit_us$eval)),
rep("Our monotone", length(fit_us$eval))),
x = c(as.numeric(t(fit_lc$eval)),
as.numeric(t(fit_ll$eval)),
fit_us$eval,
fit_us$eval),
y = c(fit_lc$mean, fit_ll$mean, fit_us$yhat, rep(NA, length(fit_us$eval))))
visout_cwave$type <- factor(visout_cwave$type, levels = c("Our isotropic", "Our monotone", "Local constant", "Local linear"))
p1 <- ggplot() +
geom_point(data = data.frame(x = x, y = y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = x, y = y), aes(x = x, y = y), color = "black", lwd = 1.25) +
geom_line(data = visout_cwave, aes(x = x, y = y, col = type, lty = type), lwd = 1.2, alpha = 0.75) +
scale_color_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "#E41A1C", "Our monotone" = "#4DAF4A", "Local constant" = "#377EB8", "Local linear" = "#e0e002")) +
scale_linetype_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "twodash", "Our monotone" = "twodash", "Local constant" = "dashed", "Local linear" = "dotted")) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
rm(idx, x, y, y_err, fit_lc, fit_ll, fit_us)
###########################################################################
###
###########################################################################
idx     <- 6
x       <- result_spherical_complex$history_data[[idx]]$x
y       <- result_spherical_complex$history_data[[idx]]$y
y_err   <- result_spherical_complex$history_data[[idx]]$y_err
fit_lc  <- result_spherical_complex$history_fit[[idx]]$fit_lc
fit_ll  <- result_spherical_complex$history_fit[[idx]]$fit_ll
fit_us  <- result_spherical_complex$history_fit[[idx]]$fit_us
visout_csphe <- data.frame(type = c(rep("Local constant", length(as.numeric(t(fit_lc$eval)))),
rep("Local linear", length(as.numeric(t(fit_ll$eval)))),
rep("Our isotropic", length(fit_us$eval)),
rep("Our monotone", length(fit_us$eval))),
x = c(as.numeric(t(fit_lc$eval)),
as.numeric(t(fit_ll$eval)),
fit_us$eval,
fit_us$eval),
y = c(fit_lc$mean, fit_ll$mean, rep(NA, length(fit_us$eval)), fit_us$yhat))
visout_csphe$type <- factor(visout_csphe$type, levels = c("Our isotropic", "Our monotone", "Local constant", "Local linear"))
p2 <- ggplot() +
geom_point(data = data.frame(x = x, y = y_err), aes(x = x, y = y), color = "gray75") +
geom_line(data = data.frame(x = x, y = y), aes(x = x, y = y), color = "black", lwd = 1.25, alpha = 0.75) +
geom_line(data = visout_csphe, aes(x = x, y = y, col = type, lty = type), lwd = 1.2, alpha = 0.75) +
scale_color_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "#E41A1C", "Our monotone" = "#4DAF4A", "Local constant" = "#377EB8", "Local linear" = "#e0e002")) +
scale_linetype_manual(name = NULL, labels = c("Our isotropic" = "Our isotropic", "Our monotone" = "Our monotone", "Local constant" = "Local constant", "Local linear" = "Local linear"), values = c("Our isotropic" = "twodash", "Our monotone" = "twodash", "Local constant" = "dashed", "Local linear" = "dotted")) +
theme_bw() + xlab(NULL) + ylab(NULL) +
theme(legend.direction = 'horizontal', legend.key.width = unit(2, "cm"))
tmp       <- ggplot_gtable(ggplot_build(p1))
leg       <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
mylegend  <- tmp$grobs[[leg]]
### Merge the two plots ###
p.merge    <- grid.arrange(mylegend, arrangeGrob(p1 + theme(legend.position = "none"),
p2 + theme(legend.position = "none"),
ncol = 2), nrow = 2, heights = c(1, 10))
ggplot2::ggsave("img/simulation_regression.pdf", p.merge, width = 7.5, height = 3.5)
