// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ksreflect_C
double ksreflect_C(const double r, const Rcpp::NumericVector data, const double h, const std::string kernel, const std::string shape);
RcppExport SEXP _NPcov_ksreflect_C(SEXP rSEXP, SEXP dataSEXP, SEXP hSEXP, SEXP kernelSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const std::string >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(ksreflect_C(r, data, h, kernel, shape));
    return rcpp_result_gen;
END_RCPP
}
// eval_sse_C
Rcpp::NumericVector eval_sse_C(const Rcpp::NumericMatrix storage, const Rcpp::NumericVector x, const Rcpp::NumericVector y, const double h, const std::string kernel, const std::string shape);
RcppExport SEXP _NPcov_eval_sse_C(SEXP storageSEXP, SEXP xSEXP, SEXP ySEXP, SEXP hSEXP, SEXP kernelSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type storage(storageSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const std::string >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_sse_C(storage, x, y, h, kernel, shape));
    return rcpp_result_gen;
END_RCPP
}
// evalEach_sse_C
double evalEach_sse_C(const Rcpp::NumericVector data, const Rcpp::NumericVector x, const Rcpp::NumericVector y, const double h, const std::string kernel, const std::string shape);
RcppExport SEXP _NPcov_evalEach_sse_C(SEXP dataSEXP, SEXP xSEXP, SEXP ySEXP, SEXP hSEXP, SEXP kernelSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const std::string >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(evalEach_sse_C(data, x, y, h, kernel, shape));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NPcov_ksreflect_C", (DL_FUNC) &_NPcov_ksreflect_C, 5},
    {"_NPcov_eval_sse_C", (DL_FUNC) &_NPcov_eval_sse_C, 6},
    {"_NPcov_evalEach_sse_C", (DL_FUNC) &_NPcov_evalEach_sse_C, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_NPcov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
